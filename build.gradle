plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id "org.sonarqube" version "3.0"
    id "jacoco"
    id 'checkstyle'
    id 'com.google.cloud.tools.jib' version '3.1.1'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.vkpapps'
version = '0.0.1'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'co.elastic.clients:elasticsearch-java:8.5.0'
    implementation 'software.amazon.awssdk:sns:2.18.11'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'jakarta.json:jakarta.json-api:2.1.1'
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.12'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive:2.7.5'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'org.apache.poi:poi:5.2.2'

    implementation 'com.google.protobuf:protobuf-java:3.21.12'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation "org.testcontainers:testcontainers:1.18.0"
    testImplementation "org.testcontainers:junit-jupiter:1.17.6"
    testImplementation "org.testcontainers:localstack:1.17.6"
    testImplementation "com.amazonaws:aws-java-sdk-sns:1.11.914"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.12'
    }

}

tasks.test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

plugins.withType(JacocoPlugin).configureEach {
    tasks.test.finalizedBy 'jacocoTestReport'
}

sonarqube {
    properties {
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.projectKey", "demo"
        property "sonar.login", "11357d7274f8dab3c1816e43ccbac6273a64a54e"
        property "sonar.coverage.jacoco.xmlReportPath", "${buildDir}/reports/jacoco.xml"
    }
}

checkstyle {
    ignoreFailures = false
    maxErrors = 0
    toolVersion = "10.11.0"
    configFile = rootProject.file("checkstyle/checkstyle.xml")
}
checkstyleMain.exclude("com/vkpapps/protos/*.java")

sourceSets {
    integrationTest {
        java.srcDir file("src/integrationTest/java")
        resources.srcDir file("src/integrationTest/resources")
        runtimeClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
        compileClasspath += sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
    }
}
tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()

    testLogging {
        events "passed"
    }
}

jib {
    from {
        image = "amazoncorretto:11"
    }
    to {
        image = "docker.io/vijaypatidar31/webflux"
        tags = ["latest", version]
    }
    container {
        mainClass = "com.vkpapps.demo.CoolSpringWebfluxApplication"
        jvmFlags = []
        ports = ["443"]
    }
}
check.dependsOn integrationTest
test.finalizedBy jacocoTestReport